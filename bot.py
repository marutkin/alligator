import random
import logging
import asyncio
import sqlite3
import os
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher
from aiogram.types import Message
from aiogram.enums import ChatType
from aiogram.filters import Command
from aiogram.client.default import DefaultBotProperties
from asyncio import TimeoutError
from datetime import datetime, timedelta

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()
TOKEN = os.getenv("TOKEN")

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode="Markdown"))
dp = Dispatcher()

question_of_the_day = None  # –•—Ä–∞–Ω–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ –¥–Ω—è

# –•—Ä–∞–Ω–∏–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—ã–∑–æ–≤–∞ –∫–æ–º–∞–Ω–¥
last_pick_time = None
last_history_time = None

# –°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite
def init_db():
    connection = sqlite3.connect('bot_history.db')
    cursor = connection.cursor()
    
    # –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    cursor.execute('''CREATE TABLE IF NOT EXISTS pick_history (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        admin_id INTEGER,
                        admin_name TEXT,
                        question TEXT,
                        timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
                      )''')
    cursor.execute('''CREATE TABLE IF NOT EXISTS questions (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        question TEXT,
                        timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
                      )''')
    
    connection.commit()
    connection.close()

def update_db_schema():
    connection = sqlite3.connect('bot_history.db')
    cursor = connection.cursor()

    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü question, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    cursor.execute('''PRAGMA foreign_keys=off;''')  # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏
    cursor.execute('''ALTER TABLE pick_history ADD COLUMN question TEXT;''')
    cursor.execute('''PRAGMA foreign_keys=on;''')  # –í–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ
    
    connection.commit()
    connection.close()

# –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–µ –∏ –≤–æ–ø—Ä–æ—Å–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
def add_pick_history(admin_id, admin_name, question):
    connection = sqlite3.connect('bot_history.db')
    cursor = connection.cursor()
    
    cursor.execute('INSERT INTO pick_history (admin_id, admin_name, question) VALUES (?, ?, ?)', 
                   (admin_id, admin_name, question))
    
    connection.commit()
    connection.close()

# –ü–æ–ª—É—á–∞–µ–º –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é –≤—ã–±–æ—Ä–∞
def get_pick_history():
    connection = sqlite3.connect('bot_history.db')
    cursor = connection.cursor()
    
    cursor.execute('SELECT admin_name, question, timestamp FROM pick_history ORDER BY timestamp DESC LIMIT 10')
    history = cursor.fetchall()
    
    connection.close()
    
    return history

@dp.message(Command("question"))
async def set_question(message: Message):
    if message.text == "/question":
        await message.reply("–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /question")
        return
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤–æ–ø—Ä–æ—Å –¥–Ω—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    global question_of_the_day
    if message.chat.type not in [ChatType.GROUP, ChatType.SUPERGROUP]:
        await message.reply("–≠—Ç–æ—Ç –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö!")
        return

    question_of_the_day = message.text[len("/question "):].strip()
    
    """–í—ã–±–∏—Ä–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —á–∞—Ç–∞ —Å —Ç–∞–π–º-–∞—É—Ç–æ–º"""
    global last_pick_time

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ cooldown
    if not check_cooldown(last_pick_time):
        remaining_time = timedelta(minutes=1) - (datetime.now() - last_pick_time)
        await message.reply(f"–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –µ—â–µ {remaining_time.seconds} —Å–µ–∫—É–Ω–¥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤—ã–∑–æ–≤–∞ –∫–æ–º–∞–Ω–¥—ã.")
        return

    try:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º-–∞—É—Ç –≤ 1 –º–∏–Ω—É—Ç—É
        await asyncio.wait_for(pick_admin_logic(message), timeout=60)
        last_pick_time = datetime.now()  # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—ã–∑–æ–≤–∞
    
    except TimeoutError:
        await message.reply("–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /pick –∏—Å—Ç–µ–∫–ª–æ!")


    # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –≤ –±–∞–∑—É
    connection = sqlite3.connect('bot_history.db')
    cursor = connection.cursor()
    cursor.execute('INSERT INTO questions (question) VALUES (?)', (question_of_the_day,))
    connection.commit()
    connection.close()
    
    # await message.reply(f"–û–ª–µ–≥–∞—Ç–æ—Ä –∑–∞–ø–æ–º–Ω–∏–ª: {question_of_the_day}")

def check_cooldown(last_time):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø—Ä–æ—à–ª–æ –ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—ã–∑–æ–≤–∞ (1)"""
    if last_time is None:
        return True
    return datetime.now() - last_time > timedelta(minutes=1)

async def pick_admin_logic(message: Message):
    """–õ–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    try:
        chat_admins = await bot.get_chat_administrators(message.chat.id)
        admin_list = [admin.user for admin in chat_admins if not admin.user.is_bot]

        if not admin_list:
            await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞.")
            return

        chosen_admin = random.choice(admin_list)
        chosen_mention = f"[{chosen_admin.first_name}](tg://user?id={chosen_admin.id})"

        # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±–æ—Ä –∏ –≤–æ–ø—Ä–æ—Å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        add_pick_history(chosen_admin.id, chosen_admin.first_name, question_of_the_day)

        logging.info(f"Chosen admin: {chosen_admin.first_name}")
        logging.info(f"Admin list: {', '.join([admin.first_name for admin in admin_list])}")

        if question_of_the_day:
            await message.reply(f"–≠—Ç–æ {chosen_mention} üéâ")
        else:
            await message.reply(f"üéâ {chosen_mention}, —Ç—ã –≤—ã–±—Ä–∞–Ω!")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

@dp.message(Command("history"))
async def show_history(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –≤—ã–±–æ—Ä–æ–≤ –∏ –≤–æ–ø—Ä–æ—Å–æ–≤"""
    global last_history_time

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ cooldown
    if not check_cooldown(last_history_time):
        remaining_time = timedelta(minutes=1) - (datetime.now() - last_history_time)
        await message.reply(f"–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –µ—â–µ {remaining_time.seconds} —Å–µ–∫—É–Ω–¥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤—ã–∑–æ–≤–∞ –∫–æ–º–∞–Ω–¥—ã, –û–ª–µ–≥–∞—Ç–æ—Ä —á–∏–ª–∏—Ç.")
        return

    history = get_pick_history()

    if not history:
        await message.reply("–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.")
        return

    history_message = "–ò—Å—Ç–æ—Ä–∏—è –≤—ã–±–æ—Ä–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:\n"
    for admin_name, question, timestamp in history:
        history_message += f"{timestamp} - {admin_name} - –í–æ–ø—Ä–æ—Å: {question}\n"
    
    await message.reply(history_message)
    last_history_time = datetime.now()  # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—ã–∑–æ–≤–∞

async def main():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
    logging.basicConfig(level=logging.INFO)
    init_db()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
